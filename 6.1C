pipeline {
    agent any

    stages {
        stage("Build") {
            steps {
                echo 'Building project to compile and package using Maven'
                // sh 'mvn clean package'
            }
        }

        stage("Unit and Integration Tests") {
            steps {
                echo 'JUnit test for code function.'
                // sh 'mvn test'
                echo 'Integration Test working together.'
                // sh 'mvn verify'
            }
            post { 
                success {
                    mail to: "shreydsaraf@gmail.com",
                         subject: "Success: JUnit and Integration test successful.",
                         body: "JUnit and Integration tests have passed successfully. Stage is working.",
                          def result= attachLog: true;
                }
                failure {
                    mail to: "shreydsaraf@gmail.com",
                         subject: "Failure: JUnit and Integration test failure.",
                         body: "JUnit and Integration tests have failed. Stage is not working. Please review the logs."
                }
            }
        }

        stage("Code Analysis") {
            steps {
                echo 'Performing code analysis using SonarQube'
                // sh 'mvn sonar:sonar'
            }
        }

        stage("Security Scan") {
            steps {
                echo 'Performing security scan using OWASP ZAP'
                // sh 'zap-cli quick-scan --self-contained --start-options "-config api.disablekey=true" http://localhost:8080'
            }
            post {
                success {
                    mail to: "shreydsaraf@gmail.com",
                         subject: "Success: Security scan successful.",
                         body: "Security scan has completed successfully. Scan is secure."
                }
                failure {
                    mail to: "shreydsaraf@gmail.com",
                         subject: "Failure: Security scan failed.",
                         body: "Security scan has failed. Scan is not secure. Please review and take necessary actions."
                }
            }
        }

        stage("Deploy to Staging") {
            steps {
                echo 'Deploy to staging server AWS EC2 s3://staging-bucket/'
                // sh 'aws deploy create-deployment --application-name my-app --deployment-group-name staging-group --s3-location bucket=staging-bucket,key=my-app.zip'
            }
        }

        stage("Integration Tests on Staging") {
            steps {
                echo 'Run Integration Tests on Staging environment'
                // sh 'mvn verify -Dtest=IntegrationTest'
            }
        }

        stage("Deploy to Production") {
            steps {
                echo 'Deploy to Production server AWS EC2'
                // sh 'aws deploy create-deployment --application-name my-app --deployment-group-name production-group --s3-location bucket=production-bucket,key=my-app.zip'
            }
        }

        stage("Complete") {
            steps {
                echo 'Completed'
            }
        }
    
    }

    post {
        success {
            echo 'Deployment to production successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
